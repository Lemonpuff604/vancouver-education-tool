import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Checkbox } from '@/components/ui/checkbox';
import { Badge } from '@/components/ui/badge';
import { Slider } from '@/components/ui/slider';
import { Progress } from '@/components/ui/progress';
import { 
  ArrowRight, 
  ArrowLeft, 
  BookOpen, 
  Users, 
  DollarSign, 
  MapPin, 
  Calendar,
  Download,
  Star,
  Home,
  RefreshCw,
  Clock,
  FileText,
  AlertCircle,
  CheckCircle
} from 'lucide-react';

// Import comprehensive school data
import { schools, School, getApplicationTimeline, getPrivateSchools, getPublicChoicePrograms, getSchoolsRequiringSSAT } from './data/schools';

export default function App() {
  const [currentStep, setCurrentStep] = useState(0);
  const [profile, setProfile] = useState({
    childAge: 5,
    budget: 0,
    location: 'Vancouver',
    priorities: [] as string[]
  });
  const [selectedSchools, setSelectedSchools] = useState<string[]>([]);

  const steps = ['Welcome', 'Profile', 'Discovery', 'Results'];
  const progressPercentage = (currentStep / (steps.length - 1)) * 100;

  const nextStep = () => setCurrentStep(Math.min(currentStep + 1, steps.length - 1));
  const prevStep = () => setCurrentStep(Math.max(currentStep - 1, 0));
  const restart = () => {
    setCurrentStep(0);
    setProfile({ childAge: 5, budget: 0, location: 'Vancouver', priorities: [] });
    setSelectedSchools([]);
  };

  const priorities = [
    'Academic Excellence',
    'Arts & Creativity', 
    'Small Class Sizes',
    'Language Learning',
    'Gifted Programs',
    'Technology Focus',
    'Outdoor Education',
    'Strong Community'
  ];

  const togglePriority = (priority) => {
    const current = profile.priorities;
    if (current.includes(priority)) {
      setProfile({...profile, priorities: current.filter(p => p !== priority)});
    } else {
      setProfile({...profile, priorities: [...current, priority]});
    }
  };

  const toggleSchool = (schoolId) => {
    if (selectedSchools.includes(schoolId)) {
      setSelectedSchools(selectedSchools.filter(id => id !== schoolId));
    } else if (selectedSchools.length < 5) {
      setSelectedSchools([...selectedSchools, schoolId]);
    }
  };

  // Helper function to determine appropriate school levels based on child's age
  const getAppropriateSchoolLevels = (age: number): string[] => {
    if (age >= 2 && age <= 6) {
      return ['preschool', 'elementary', 'k12'];
    } else if (age >= 7 && age <= 11) {
      return ['elementary', 'k12'];
    } else if (age >= 12 && age <= 14) {
      return ['middle', 'high', 'k12'];
    } else if (age >= 15 && age <= 18) {
      return ['high', 'k12'];
    } else {
      return ['preschool', 'elementary', 'middle', 'high', 'k12']; // Show all if age is outside typical range
    }
  };

  const filteredSchools = schools.filter(school => {
    // Filter by age/grade level appropriateness
    const appropriateLevels = getAppropriateSchoolLevels(profile.childAge);
    if (!appropriateLevels.includes(school.level)) return false;
    
    // Filter by budget
    if (profile.budget === 0 && school.tuition !== 'Free') return false;
    if (profile.budget > 0 && school.tuition === 'Free') return true;
    if (profile.budget > 0 && typeof school.tuition === 'number') {
      if (school.tuition > profile.budget) return false;
    }
    return true;
  });

  const formatBudget = (budget) => {
    if (budget === 0) return 'Public schools only (Free)';
    return `Up to $${budget.toLocaleString()}/year`;
  };

  const downloadPlan = () => {
    const selectedSchoolData = schools.filter(s => selectedSchools.includes(s.id));
    const summary = `
VANCOUVER EDUCATION PLAN
Generated: ${new Date().toLocaleDateString()}

FAMILY PROFILE:
- Child Age: ${profile.childAge} years
- Budget: ${formatBudget(profile.budget)}
- Location: ${profile.location}
- Priorities: ${profile.priorities.join(', ')}

SELECTED SCHOOLS:
${selectedSchoolData.map(school => `
${school.name}
- Type: ${school.type}
- Location: ${school.location}
- Grades: ${school.grades}
- Tuition: ${school.tuition}
- Specialties: ${school.specialty.join(', ')}
- Application Deadline: ${school.applicationDeadline}
`).join('\\n')}

NEXT STEPS:
1. Visit selected schools
2. Prepare application materials
3. Mark important deadlines on calendar
4. Continue monitoring academic progress

Generated by Vancouver Education Decision Tool
    `;

    const blob = new Blob([summary], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'vancouver-education-plan.txt';
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-green-50">
      {/* Header */}
      <header className="bg-white border-b">
        <div className="max-w-6xl mx-auto px-4 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-3">
              <BookOpen className="w-8 h-8 text-blue-600" />
              <h1 className="text-xl font-bold">Vancouver Education Tool</h1>
            </div>
            {currentStep > 0 && (
              <div className="flex items-center space-x-4">
                <span className="text-sm text-gray-600">
                  Step {currentStep} of {steps.length - 1}
                </span>
                <Progress value={progressPercentage} className="w-32" />
              </div>
            )}
          </div>
        </div>
      </header>

      <main className="max-w-4xl mx-auto px-4 py-8">
        {/* Welcome Step */}
        {currentStep === 0 && (
          <div className="text-center space-y-8">
            <div className="space-y-4">
              <h1 className="text-5xl font-bold bg-gradient-to-r from-blue-600 to-green-600 bg-clip-text text-transparent">
                Vancouver Education Decision Tool
              </h1>
              <p className="text-xl text-gray-600 max-w-2xl mx-auto">
                Find the perfect school for your child. From preschool to high school, 
                we'll help you navigate Vancouver's educational options.
              </p>
            </div>

            <div className="grid md:grid-cols-3 gap-6">
              <Card className="text-center">
                <CardHeader>
                  <BookOpen className="w-12 h-12 mx-auto text-blue-500" />
                  <CardTitle>100+ Schools</CardTitle>
                </CardHeader>
                <CardContent>
                  <p className="text-sm text-gray-600">
                    Public, private, and specialized programs
                  </p>
                </CardContent>
              </Card>

              <Card className="text-center">
                <CardHeader>
                  <Users className="w-12 h-12 mx-auto text-green-500" />
                  <CardTitle>Personalized Matching</CardTitle>
                </CardHeader>
                <CardContent>
                  <p className="text-sm text-gray-600">
                    Find schools that match your family's needs
                  </p>
                </CardContent>
              </Card>

              <Card className="text-center">
                <CardHeader>
                  <Calendar className="w-12 h-12 mx-auto text-purple-500" />
                  <CardTitle>Timeline Planning</CardTitle>
                </CardHeader>
                <CardContent>
                  <p className="text-sm text-gray-600">
                    Get deadlines and preparation steps
                  </p>
                </CardContent>
              </Card>
            </div>

            <Button onClick={nextStep} size="lg" className="text-lg px-8 py-3">
              Get Started
              <ArrowRight className="ml-2 w-5 h-5" />
            </Button>
          </div>
        )}

        {/* Profile Step */}
        {currentStep === 1 && (
          <div className="space-y-8">
            <div className="text-center">
              <h2 className="text-3xl font-bold">Tell Us About Your Family</h2>
              <p className="text-gray-600 mt-2">
                This helps us recommend the best schools for your child
              </p>
            </div>

            <div className="grid md:grid-cols-2 gap-8">
              <Card>
                <CardHeader>
                  <CardTitle>Child Information</CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div>
                    <Label>Child's Age</Label>
                    <Select value={profile.childAge.toString()} onValueChange={(value) => 
                      setProfile({...profile, childAge: parseInt(value)})
                    }>
                      <SelectTrigger>
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        {[
                          { age: 3, label: "3 years old (Preschool)" },
                          { age: 4, label: "4 years old (Pre-K/JK)" },
                          { age: 5, label: "5 years old (Kindergarten)" },
                          { age: 6, label: "6 years old (Grade 1)" },
                          { age: 7, label: "7 years old (Grade 2)" },
                          { age: 8, label: "8 years old (Grade 3)" },
                          { age: 9, label: "9 years old (Grade 4)" },
                          { age: 10, label: "10 years old (Grade 5)" },
                          { age: 11, label: "11 years old (Grade 6)" },
                          { age: 12, label: "12 years old (Grade 7)" },
                          { age: 13, label: "13 years old (Grade 8)" },
                          { age: 14, label: "14 years old (Grade 9)" },
                          { age: 15, label: "15 years old (Grade 10)" },
                          { age: 16, label: "16 years old (Grade 11)" },
                          { age: 17, label: "17 years old (Grade 12)" }
                        ].map(({ age, label }) => (
                          <SelectItem key={age} value={age.toString()}>
                            {label}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>

                  <div>
                    <Label>Location</Label>
                    <Select value={profile.location} onValueChange={(value) => 
                      setProfile({...profile, location: value})
                    }>
                      <SelectTrigger>
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="Vancouver">Vancouver</SelectItem>
                        <SelectItem value="Burnaby">Burnaby</SelectItem>
                        <SelectItem value="Richmond">Richmond</SelectItem>
                        <SelectItem value="North Vancouver">North Vancouver</SelectItem>
                        <SelectItem value="West Vancouver">West Vancouver</SelectItem>
                        <SelectItem value="Surrey">Surrey</SelectItem>
                        <SelectItem value="New Westminster">New Westminster</SelectItem>
                        <SelectItem value="Maple Ridge">Maple Ridge</SelectItem>
                        <SelectItem value="Flexible">Flexible/Willing to Move</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle>Budget</CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div>
                    <Label>Annual Education Budget</Label>
                    <div className="space-y-3 mt-2">
                      <Slider
                        value={[profile.budget]}
                        onValueChange={(value) => setProfile({...profile, budget: value[0]})}
                        max={50000}
                        step={2500}
                        className="w-full"
                      />
                      <div className="text-center font-medium">
                        {formatBudget(profile.budget)}
                      </div>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </div>

            <Card>
              <CardHeader>
                <CardTitle>Educational Priorities</CardTitle>
                <CardDescription>Select what matters most to your family</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="grid sm:grid-cols-2 md:grid-cols-3 gap-3">
                  {priorities.map((priority) => (
                    <div
                      key={priority}
                      className={`flex items-center space-x-3 p-3 rounded-lg border cursor-pointer transition-colors ${
                        profile.priorities.includes(priority)
                          ? 'border-blue-500 bg-blue-50'
                          : 'border-gray-200 hover:border-gray-300'
                      }`}
                      onClick={() => togglePriority(priority)}
                    >
                      <Checkbox checked={profile.priorities.includes(priority)} />
                      <Label className="cursor-pointer text-sm">
                        {priority}
                      </Label>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>

            <div className="flex justify-between">
              <Button variant="outline" onClick={prevStep}>
                <ArrowLeft className="w-4 h-4 mr-2" />
                Back
              </Button>
              <Button onClick={nextStep}>
                Find Schools
                <ArrowRight className="w-4 h-4 ml-2" />
              </Button>
            </div>
          </div>
        )}

        {/* Discovery Step */}
        {currentStep === 2 && (
          <div className="space-y-6">
            <div className="text-center">
              <h2 className="text-3xl font-bold">Discover Schools</h2>
              <p className="text-gray-600 mt-2">
                Found {filteredSchools.length} schools that match your criteria. 
                Select up to 5 to compare.
              </p>
            </div>

            {selectedSchools.length > 0 && (
              <Card className="bg-blue-50 border-blue-200">
                <CardContent className="pt-6">
                  <div className="flex items-center justify-between">
                    <span className="font-medium">
                      {selectedSchools.length} school{selectedSchools.length !== 1 ? 's' : ''} selected
                    </span>
                    <Badge variant="secondary">
                      {5 - selectedSchools.length} remaining
                    </Badge>
                  </div>
                </CardContent>
              </Card>
            )}

            <div className="grid md:grid-cols-2 gap-6">
              {filteredSchools.map((school) => (
                <Card 
                  key={school.id}
                  className={`cursor-pointer transition-all ${
                    selectedSchools.includes(school.id) 
                      ? 'border-blue-500 bg-blue-50' 
                      : 'hover:shadow-md'
                  }`}
                  onClick={() => toggleSchool(school.id)}
                >
                  <CardHeader>
                    <div className="flex justify-between items-start">
                      <div>
                        <CardTitle className="text-lg">{school.name}</CardTitle>
                        <CardDescription className="flex items-center gap-2 mt-1">
                          <MapPin className="w-4 h-4" />
                          {school.location} • {school.grades}
                        </CardDescription>
                      </div>
                      <Checkbox checked={selectedSchools.includes(school.id)} />
                    </div>
                  </CardHeader>
                  <CardContent className="space-y-3">
                    <div className="text-blue-600 font-medium">
                      {school.specialty.join(', ')}
                    </div>
                    
                    <div className="flex items-center gap-4 text-sm text-gray-600">
                      <div className="flex items-center gap-1">
                        <DollarSign className="w-4 h-4" />
                        {school.tuition}
                      </div>
                      <div className="flex items-center gap-1">
                        <Calendar className="w-4 h-4" />
                        Due: {school.applicationDeadline}
                      </div>
                    </div>

                    <div className="flex flex-wrap gap-1">
                      {school.features.map((feature, index) => (
                        <Badge key={index} variant="outline" className="text-xs">
                          {feature}
                        </Badge>
                      ))}
                    </div>

                    <div className="text-xs text-gray-500">
                      Competitiveness: {school.competitiveness}
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>

            <div className="flex justify-between">
              <Button variant="outline" onClick={prevStep}>
                <ArrowLeft className="w-4 h-4 mr-2" />
                Back
              </Button>
              <Button 
                onClick={nextStep} 
                disabled={selectedSchools.length === 0}
              >
                View Results ({selectedSchools.length})
                <ArrowRight className="w-4 h-4 ml-2" />
              </Button>
            </div>
          </div>
        )}

        {/* Results Step */}
        {currentStep === 3 && (
          <div className="space-y-8">
            <div className="text-center">
              <h2 className="text-3xl font-bold">Your Education Plan</h2>
              <p className="text-gray-600 mt-2">
                Your personalized school recommendations and next steps
              </p>
            </div>

            <div className="grid md:grid-cols-3 gap-6">
              <Card className="text-center">
                <CardHeader>
                  <BookOpen className="w-12 h-12 mx-auto text-blue-500" />
                  <CardTitle>{selectedSchools.length} Schools</CardTitle>
                </CardHeader>
                <CardContent>
                  <p className="text-sm text-gray-600">
                    Selected for your family
                  </p>
                </CardContent>
              </Card>

              <Card className="text-center">
                <CardHeader>
                  <DollarSign className="w-12 h-12 mx-auto text-green-500" />
                  <CardTitle>{formatBudget(profile.budget)}</CardTitle>
                </CardHeader>
                <CardContent>
                  <p className="text-sm text-gray-600">
                    Your budget range
                  </p>
                </CardContent>
              </Card>

              <Card className="text-center">
                <CardHeader>
                  <Calendar className="w-12 h-12 mx-auto text-purple-500" />
                  <CardTitle>Age {profile.childAge}</CardTitle>
                </CardHeader>
                <CardContent>
                  <p className="text-sm text-gray-600">
                    Planning timeline ready
                  </p>
                </CardContent>
              </Card>
            </div>

            <Card>
              <CardHeader>
                <CardTitle>Your Selected Schools</CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                {schools.filter(s => selectedSchools.includes(s.id)).map((school, index) => (
                  <div key={school.id}>
                    <div className="flex justify-between items-start">
                      <div>
                        <h3 className="font-semibold text-lg">{school.name}</h3>
                        <p className="text-gray-600">{school.specialty.join(', ')}</p>
                        <div className="flex items-center gap-4 text-sm text-gray-500 mt-1">
                          <span>{school.location}</span>
                          <span>{typeof school.tuition === 'number' ? `$${school.tuition.toLocaleString()}/year` : school.tuition}</span>
                          <span>Application Deadline: {school.applicationDeadline}</span>
                        </div>
                      </div>
                      <Badge variant="outline">{school.type}</Badge>
                    </div>
                    {index < selectedSchools.length - 1 && (
                      <hr className="mt-4" />
                    )}
                  </div>
                ))}
              </CardContent>
            </Card>

            <Card className="bg-green-50 border-green-200">
              <CardHeader>
                <CardTitle className="text-green-800">Next Steps</CardTitle>
              </CardHeader>
              <CardContent className="text-green-700">
                <ol className="list-decimal list-inside space-y-2">
                  <li>Download your personalized education plan</li>
                  <li>Visit the schools you've selected</li>
                  <li>Mark application deadlines on your calendar</li>
                  <li>Start preparing application materials</li>
                  <li>Keep monitoring your child's academic progress</li>
                </ol>
              </CardContent>
            </Card>

            <div className="flex flex-col sm:flex-row gap-4 justify-center">
              <Button onClick={downloadPlan} size="lg">
                <Download className="w-4 h-4 mr-2" />
                Download Your Plan
              </Button>
              <Button variant="outline" onClick={restart} size="lg">
                <RefreshCw className="w-4 h-4 mr-2" />
                Start Over
              </Button>
            </div>
          </div>
        )}
      </main>

      <footer className="bg-white border-t mt-16">
        <div className="max-w-4xl mx-auto px-4 py-8 text-center text-sm text-gray-600">
          <p>
            Vancouver Education Decision Tool • Data updated December 2024
          </p>
          <p className="mt-2">
            Always verify current details with schools directly.
          </p>
        </div>
      </footer>
    </div>
  );
}